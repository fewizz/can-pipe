plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    include(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
    modCompileOnly(fabricApi.module("fabric-renderer-indigo", fabric_version))

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation(fabricApi.module("fabric-resource-loader-v0", fabric_version))

    modImplementation "blue.endless:jankson:1.2.3"
    include "blue.endless:jankson:1.2.3"
}

loom {
    accessWidenerPath = file("src/main/resources/canpipe.accesswidener")

    runs {
        client {
            client()
            setConfigName('Fabric')
            ideConfigGenerated(true)
            runDir('../run')
            appendProjectPathToConfigName = false
        }
    }
}

base {
    archivesName = mod_id
}

compileJava.source project(":common").sourceSets.main.allSource

processResources {
    from project(":common").sourceSets.main.resources

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

runClient {
    useArgFile = false
}